{"version":3,"sources":["background.jpg","components/Countdown/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Countdown","calculateTimeLeft","difference","Date","days","Math","floor","hours","minutes","seconds","useState","timeLeft","setTimeLeft","useEffect","setTimeout","className","App","src","imageSrc","alt","target","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,wC,uLCsD5BC,EApDG,WAChB,IAAMC,EAAoB,WAMxB,IAAMC,GAAc,IAAIC,KAAK,eAAiB,IAAIA,KAElD,OAAOD,EAAa,EAChB,CACEE,KAAMC,KAAKC,MAAMJ,EAAU,OAC3BK,MAAOF,KAAKC,MAAOJ,EAAU,KAAuB,IACpDM,QAASH,KAAKC,MAAOJ,EAAa,IAAO,GAAM,IAC/CO,QAASJ,KAAKC,MAAOJ,EAAa,IAAQ,KAE5C,CACEE,KAAM,EACNG,MAAO,EACPC,QAAS,EACTC,QAAS,IApBK,EAwBUC,mBAAST,KAxBnB,mBAwBfU,EAxBe,KAwBLC,EAxBK,KAgCtB,OANAC,qBAAU,WACRC,YAAW,WACTF,EAAYX,OACX,QAIH,yBAAKc,UAAU,qFACb,0BAAMA,UAAU,oCAAoCJ,EAASP,MAC7D,0BAAMW,UAAU,8CAAhB,SACA,0BAAMA,UAAU,oCAAoCJ,EAASJ,OAC7D,0BAAMQ,UAAU,8CAAhB,UACA,0BAAMA,UAAU,oCACbJ,EAASH,SAEZ,0BAAMO,UAAU,8CAAhB,YAGA,0BAAMA,UAAU,oCACbJ,EAASF,SAEZ,0BAAMM,UAAU,iCAAhB,cCnBSC,EAzBH,WACV,OACE,0BAAMD,UAAU,wCACd,4BAAQA,UAAU,yFAChB,yBAAKA,UAAU,6BAA6BE,IAAKC,IAAUC,IAAI,MAGjE,yBAAKJ,UAAU,yDACb,yBAAKA,UAAU,gEACb,wBAAIA,UAAU,uBAAd,sBAEF,kBAAC,EAAD,MAEA,uBACEA,UAAU,2IACVK,OAAO,SACPC,KAAK,wCAHP,sBCNYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.92aefcff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.6c8137e3.jpg\";","import React, { useEffect, useState } from 'react';\n\nconst Countdown = () => {\n  const calculateTimeLeft = (): {\n    hours: number;\n    seconds: number;\n    minutes: number;\n    days: number;\n  } => {\n    const difference = +new Date('2020-07-11') - +new Date();\n\n    return difference > 0\n      ? {\n          days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n          hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n          minutes: Math.floor((difference / 1000 / 60) % 60),\n          seconds: Math.floor((difference / 1000) % 60),\n        }\n      : {\n          days: 0,\n          hours: 0,\n          minutes: 0,\n          seconds: 0,\n        };\n  };\n\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n  });\n\n  return (\n    <div className=\"flex items-center p-3 md:p-10 text-center justify-center bg-white mt-4 rounded-15\">\n      <span className=\"text-md md:text-4xl ml-1 md:ml-3\">{timeLeft.days}</span>\n      <span className=\"text-md md:text-xl opacity-75 ml-1 md:ml-3\">days,</span>\n      <span className=\"text-md md:text-4xl ml-1 md:ml-3\">{timeLeft.hours}</span>\n      <span className=\"text-md md:text-xl opacity-75 ml-1 md:ml-3\">hours,</span>\n      <span className=\"text-md md:text-4xl ml-1 md:ml-3\">\n        {timeLeft.minutes}\n      </span>\n      <span className=\"text-md md:text-xl opacity-75 ml-1 md:ml-3\">\n        minutes,\n      </span>\n      <span className=\"text-md md:text-4xl ml-1 md:ml-3\">\n        {timeLeft.seconds}\n      </span>\n      <span className=\"text-md md:text-xl opacity-75\">seconds,</span>\n    </div>\n  );\n};\n\nexport default Countdown;\n","import React from 'react';\n\nimport imageSrc from './background.jpg';\nimport Countdown from './components/Countdown';\n\nconst App = () => {\n  return (\n    <main className=\"h-screen w-screen flex items-center \">\n      <figure className=\"absolute top-0  w-full h-full overflow-hidden left-0 flex items-center justify-center\">\n        <img className=\"w-full h-full object-cover\" src={imageSrc} alt=\"\" />\n      </figure>\n\n      <div className=\"container mx-auto relative flex flex-col items-center\">\n        <div className=\"px-10 py-3 md:py-5 text-center bg-white rounded-15 shadow-md\">\n          <h1 className=\"text-sm md:text-5xl\">Masuria countdown</h1>\n        </div>\n        <Countdown />\n\n        <a\n          className=\"mt-6 px-3 md:px-6 py-2 md:py-4 bg-blue-200 shadow-md rounded-15 hover:bg-blue-400 duration-200 ease-in-out text-white text-sm md:text-md\"\n          target=\"_blank\"\n          href=\"https://www.airbnb.pl/rooms/40576035\"\n        >\n          Check this out!\n        </a>\n      </div>\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}